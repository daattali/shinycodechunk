% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/codeviewer.R
\name{code_viewer}
\alias{code_viewer}
\alias{code_viewer_ui}
\alias{code_viewer_server}
\title{Code viewer display area}
\usage{
code_viewer_ui(id, height = NULL, width = "100\%")

code_viewer_server(
  id,
  chunks = NULL,
  editable = NULL,
  error_chunk = NULL,
  skip = NULL,
  show_chunk_numbers = FALSE,
  auto_actions = TRUE
)
}
\arguments{
\item{id}{Unique ID for the module}

\item{height}{The height of the code viewer. Must be a valid CSS unit (like \code{"100\%"},
\code{"400px"}, \code{"auto"}) or a number which will be the number of pixels.}

\item{width}{The width of the code viewer. Must be a valid CSS unit (like \code{"100\%"},
\code{"400px"}, \code{"auto"}) or a number which will be the number of pixels.}

\item{chunks}{(reactive or static) A code chunk or a list of code chunks, where each code chunk is a string.
A code chunk is usually a single line of code, but it can consist of multiple lines.}

\item{editable}{(reactive or static) Vector of chunk numbers that are editable, or TRUE to make everything editable.}

\item{error_chunk}{(reactive or static) Chunk number that should be shown as the error.}

\item{skip}{(reactive or static) Number of chunks to skip in the numbering system, essentially ignoring those chunks
for interaction purposes but still showing them. For example, if there are 10 chunks in total and \code{skip = 3} and a user
clicks on insert/modify/delete on the 5th chunk, then the module will report it as the second chunk (5 - 3 = 2).
Similarly, if \code{skip = 3} and \code{error_chunk = 5}, then it will appear as if the 8th chunk is the error (because the
first 3 don't count). Skipped chunks are never editable.}

\item{show_chunk_numbers}{(boolean) If \code{TRUE}, show chunk numbers beside each code chunk (this is equivalent
to line numbers if each chunk is a single line of code).}

\item{auto_actions}{(boolean) If \code{TRUE}, clicking on an action (insert/modify/delete) will be handled
automatically by {shinycodeviewer}. If \code{FALSE}, clicking these actions will not trigger
any action, and you will need to implement a custom action by listening to the module's return
values.}
}
\value{
If \code{auto_actions == TRUE}, the return value is a reactive list of the current code chunks displayed.\cr\cr
If \code{auto_actions == FALSE}, a list with reactive elements corresponding to user interactions is returned
to allow you to respond to these actions:
\itemize{
\item insert: The chunk number the user wants to insert before
\item modify: The chunk number the user wants to modify
\item delete: The chunk number the user wants to delete
}
}
\description{
Display a series of code chunks with syntax highlighting. Each chunk can optionally
have Insert/Modify/Delete buttons.\cr\cr
Usually a code chunk is a single line of code, but a code chunk can be multiple lines
if you want to allow interactions (add/modify/delete a code chunk) that should operate
on multiple lines together.\cr\cr
One chunk can be shown as containing an error/bug.
}
\examples{
if (interactive()) {

## Example 1: Allow editing all chunks, skip first 2 chunks, use automatic actions
library(shiny)
library(shinycodeviewer)

init_code <- list(
  "library(somepackage)",
  "library(anotherpkg)",
  "",
  "# a comment",
  "x <- 5",
  "y <- x \%>\%\n  sum()",
  "z <- function(num) {\n  num*2\n}",
  "x - y / z"
)

ui <- fluidPage(
  fluidRow(
    column(
      6,
      h1("Editable code chunks"),
      code_viewer_ui("code")
    ),
    column(
      6,
      h1("Result:"),
      verbatimTextOutput("out")
    )
  )
)

server <- function(input, output, session) {
  chunks <- code_viewer_server("code", chunks = init_code,
                               editable = TRUE,skip = 2, auto_actions = TRUE)

  output$out <- renderText({
    paste(
      paste(seq_along(chunks()), ":", chunks()),
      collapse = "\n"
    )
  })
}

shinyApp(ui, server)

## -----------------------------------

## Example 2: Let user choose which chunks are editable, how many chunks to skip, which chunk
## shows an error, and use custom actions
library(shiny)
library(shinycodeviewer)

init_code <- list(
  "library(somepackage)",
  "library(anotherpkg)",
  "",
  "# a comment",
  "x <- 5",
  "y <- x \%>\%\n  sum()",
  "z <- function(num) {\n  num*2\n}",
  "x - y / z"
)

ui <- fluidPage(
  selectInput("editable", "Chunks to edit", multiple = TRUE,
    choices = seq_along(init_code), selected = seq_along(init_code)),
  sliderInput("skip", "Number of chunks to skip", min = 0,
    max = length(init_code), value = 0, step = 1),
  sliderInput("error", "Chunk number that shows an error", min = 0,
    max = length(init_code), value = 0, step = 1),
  code_viewer_ui("code")
)

server <- function(input, output, session) {
  code <- code_viewer_server("code", chunks = init_code, auto_actions = FALSE,
    editable = reactive(input$editable), skip = reactive(input$skip),
    error_chunk = reactive(input$error))

  observeEvent(code$insert(), {
    shinyalert::shinyalert(paste("Insert before chunk", code$insert()),
      closeOnClickOutside = TRUE)
  })
  observeEvent(code$modify(), {
    shinyalert::shinyalert(paste("Modify chunk", code$modify()), closeOnClickOutside = TRUE)
  })
  observeEvent(code$delete(), {
    shinyalert::shinyalert(paste("Delete chunk", code$delete()), closeOnClickOutside = TRUE)
  })
}

shinyApp(ui, server)
}
}
